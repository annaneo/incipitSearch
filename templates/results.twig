{#
    This template inherits from base.twig. See twig documentation: http://twig.sensiolabs.org/doc/templates.html
 #}

{% extends "base.twig" %}

{% block title %}Such-Ergebnisse - IncipitSuche{% endblock %}
{% block head %}
    {{ parent() }}
    <link rel="stylesheet" href="/public/piano/piano_style.css">
    <script src="/public/js/verovio-toolkit.js"></script>
    <script src="/public/piano/piano.js"></script>
{% endblock %}


{% block pageContent %}


    <script type="text/javascript">

        $(document).ready(function () {
            var vrvToolkit = new verovio.toolkit();

            $('.result').each(function (i, domResult) {
                var result = $(domResult);
                var incipit = result.find('.incipit').text();

                var data = "@clef:" + result.find('.incipitClef').text() + "\n";
                data += "@keysig:" + result.find('.incipitAccidentals').text() + "\n";
                data += "@timesig:" + result.find('.incipitTime').text() + "\n";
                data += "@data:" + result.find('.incipitNotes').text();
                //console.log("incipit data " + data);

                var containerWidth = $(".container").width();
                var scale = 40;
                if (containerWidth < 500) {
                    scale = 15;
                }
                //the output will be pageWidth * scale/100
                //to get constant size we multiply with the inverse
                var pageWidth = containerWidth * (100 / scale)

                var options = JSON.stringify({
                    inputFormat: 'pae',
                    pageHeight: 500,
                    pageWidth: pageWidth,
                    ignoreLayout: 1,
					noLayout: 1,
                    border: 0,
                    scale: 40,
                    adjustPageHeight: 1
                });

                var notesSVG = vrvToolkit.renderData(data, options);
                var svgContainerDiv = result.find('.incipitSVG');
                svgContainerDiv.html(notesSVG);

            });//end for each result


			$('.incipitSVG > svg').each(function () {  // iterate svg elements
				if ($(this).width() > $('.box').width()) { // check their width
					$(this).parent('div').css('overflow', 'scroll'); // add new class to their parent div
				}
			});//incipits will be scrollable on small screens or if they are very long

        });//end doc ready

    </script>


<div class="wrapper style1">
    <section id="main" class="container">
        <div class="box">

        <h1>Gefundene Werke</h1>
        <b>{{ numberOfResults }} Ergebnisse für das Incipit "{{ searchString }}"</b><br>
        <b><a href="/">Zurück zur Suche</a></b>

        <br><hr><br>


        {% for catalogEntry in catalogEntries %}

            <div class="result">
                <h3>{{ catalogEntry.title }}</h3>
                <h4>{{ catalogEntry.subTitle }}</h4>
                <b>{{ catalogEntry.composer }}</b><br>
                <b>{{ catalogEntry.year }}</b>

                <!-- Display the rendered notes -->
                <span class="incipitNotes hidden">{{ catalogEntry.incipit.notes }}</span>
                <span class="incipitClef hidden">{{ catalogEntry.incipit.clef }}</span>
                <span class="incipitAccidentals hidden">{{ catalogEntry.incipit.accidentals }}</span>
                <span class="incipitTime hidden">{{ catalogEntry.incipit.time }}</span>
                <span class="incipitNormalized hidden">{{ catalogEntry.incipit.notesNormalizedToSingleOctave }}</span>

                <div class="incipitSVG"></div>
                <!-- end notes displaying -->
                <b><a target="_blank" href="{{ catalogEntry.detailURL }}">Detail-Seite in {{ catalogEntry.catalog }} </a></b>
                <hr>
            </div><!--end result-->
            <br/>

        {% endfor %}

        </div>
    </section>
</div><!-- end container -->

{% endblock %} {# end pageContent #}

